name: CI


on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unit-test-backend:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test-backend.outputs.report }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
          cache-dependency-path: bugtracker-backend/go.sum

      - name: Install go-junit-report
        run: go install github.com/jstemmer/go-junit-report/v2@latest

      - name: Execute Backend Unit Tests
        id: test-backend
        working-directory: bugtracker-backend
        run: |
          # run tests and coverage
          go test -json -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out > coverage.txt

          # add coverage to the workflow summary
          echo "## Go Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # expose the coverage text as a job output called 'report'
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat coverage.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # generate junit xml for reporter
          go test -v ./... 2>&1 | go-junit-report > test-results.xml

      - name: Publish backend test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Backend Unit Tests report
          path: bugtracker-backend/test-results.xml
          reporter: jest-junit

  unit-test-frontend:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test-frontend.outputs.report }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: bugtracker-frontend/package-lock.json

      - name: Execute Frontend Unit Tests
        id: test-frontend
        working-directory: bugtracker-frontend
        run: |
          npm ci
          # run tests; adapt this to your test runner to produce coverage or a text report
          npm test | tee full_output.txt

          # add test output to the workflow summary
          echo "## Frontend Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat full_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # expose the test output as a job output called 'report'
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat full_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # If your frontend test runner can produce junit xml, write it to test-results.xml
          # (optional) e.g., jest --ci --reporters=jest-junit --outputFile=test-results.xml

      - name: Publish Frontend Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Frontend Unit Tests reporter
          path: bugtracker-frontend/test-results.xml
          reporter: jest-junit

  create-coverage-comment:
    if: github.event_name == 'pull_request'
    needs: [unit-test-backend, unit-test-frontend]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Create Backend Coverage comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Backend Test Coverage Report
            ```
            ${{ needs.unit-test-backend.outputs.coverage }}
            ```

      - name: Create Frontend Coverage comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Frontend Test Coverage Report
            ```
            ${{ needs.unit-test-frontend.outputs.coverage }}
            ```
